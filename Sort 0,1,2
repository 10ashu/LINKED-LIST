/*
 
  Node is defined as
  struct Node {
    int data;
    struct Node *next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/
class Solution
{
    public:
    //Function to sort a linked list of 0s, 1s and 2s.
    Node* segregate(Node *head) {
        
        // if(head==NULL||head->next==NULL)
        // return head;
        // int zero=0;
        // int ones=0;
        // int twos=0;
        // Node* temp=head;
        // while(temp!=NULL)
        // {
        //     if(temp->data==0)
        //     {
        //         zero++;
        //     }
        //     else if(temp->data==1)
        //      {
        //          ones++;
        //      }
        //      else
        //      {
        //          twos++;
        //      }
        //      temp=temp->next;
        // }
        // temp=head;
        // while(zero--)
        // {
        //     temp->data=0;
        //     temp=temp->next;
        // }
        //  while(ones--)
        // {
        //     temp->data=1;
        //     temp=temp->next;
        // }
        //  while(twos--)
        // {
        //     temp->data=2;
        //     temp=temp->next;
        // }
        // return head;
        if(head==NULL&&head->next==NULL)
        return head;
        Node* zero=new Node(-1);
        Node* one=new Node(-1);
        Node* two=new Node(-1);
        Node* zeroptr=zero;
        Node* oneptr=one;
        Node* twoptr=two;
        Node* temp=head;
        while(temp!=NULL)
        {
            if(temp->data==0)
            {
                zeroptr->next=temp;
                zeroptr=zeroptr->next;
            }
            else if(temp->data==1)
            {
                oneptr->next=temp;
                oneptr=oneptr->next;
            }
            else if(temp->data==2)
            {
                twoptr->next=temp;
                twoptr=twoptr->next;
            }
            temp=temp->next;
        }
        // Yhi galti hogi
        if(one->next!=NULL)
        {
            zeroptr->next=one->next;
            
                oneptr->next=two->next;
            
        }
        else
        {
    
                zeroptr->next=two->next;
            
        }
        // Yhin galti karoge
        twoptr->next=NULL;
        return zero->next;
        
        
        
        
    }
};
