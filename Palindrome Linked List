/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* head)
    {
        ListNode* pre=NULL;
        ListNode* curr=head;
        ListNode* forw;
        while(curr!=NULL)
        {
            forw=curr->next;
            curr->next=pre;
            pre=curr;
            curr=forw;
        }
         return pre;
    }
    bool isPalindrome(ListNode* head) {
        // Approach 1 stroing all the value in vector and then checking whether it is palindrome or not
        // vector<int> v;
        //  ListNode* temp=head;
        //  while(temp!=NULL)
        //  {
        //      v.push_back(temp->val);
        //      temp=temp->next;
        //  }
        //  int s=0;
        //  int e=v.size()-1;
        //  while(s<e)
        //  {
        //      if(v[s]!=v[e])
        //      return false;
        //      s++;
        //      e--;
        //  }
        //  return true;
        // Reverse krke check krlo
        // ListNode* temp=revers(head);
        // while(temp!=NULL&&head!=NULL)
        // {
        //     if(temp->val!=head->val)
        //     return false;
        //       head=head->next;
        //       temp=temp->next;
        // }
        //  return true;
        // find middle element
        ListNode* slow=head;
        ListNode* fast=head->next;
        while(fast!=NULL&&fast->next!=NULL)
        {
            fast=fast->next->next;
            slow=slow->next;
        }
        // Middle element ke aage se pori list ko revrse kra do
        // yhi aage ki 2 line me galti kroge
        ListNode* rev=reverse(slow->next);
        slow->next=rev;
        // jb tk reverse null tk nhi jaata tb tk head aur slow ke next wale element se comapre krao
        while(rev!=NULL)
        {
            if(head->val!=rev->val)
            return false;
            head=head->next;
            rev=rev->next;
        }
        return true;
    }
};
