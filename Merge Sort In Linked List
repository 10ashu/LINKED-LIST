/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
 ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        // priority_queue<ListNode*,vector<ListNode*>,compare> minheap;
        // if(list1!=NULL)
        // minheap.push(list1);
        // if(list2!=NULL)
        // minheap.push(list2);
        // ListNode* head=NULL;
        // ListNode* tail=NULL;
        // while(!minheap.empty())
        // {
        //     ListNode* temp=minheap.top();
        //     if(head==NULL)
        //     {
        //         head=temp;
        //         tail=temp;
        //     }
        //     else
        //     {
        //         tail->next=temp;
        //         tail=temp;
        //     }
        //     minheap.pop();
        //     if(tail->next!=NULL)
        //     {
        //         minheap.push(tail->next);
        //     }
        // }
        // return head;
        ListNode* dummy=new ListNode(-1);
        ListNode* tail=dummy;
        while(list1!=NULL&&list2!=NULL)
        {
            if(list1->val<list2->val)
            {
                tail->next=list1;
                tail=tail->next;
                list1=list1->next;
            }
            else
            {
                tail->next=list2;
                tail=tail->next;
                list2=list2->next;
            }
        }
        while(list1!=NULL)
        {
            tail->next=list1;
            tail=tail->next;
            list1=list1->next;

        }
        while(list2!=NULL)
        {
            tail->next=list2;
            tail=tail->next;
            list2=list2->next;
        }
        tail->next=NULL;
        return dummy->next;

    }
  ListNode* find(ListNode* head)
  {
      ListNode* slow=head;
      ListNode* fast=head->next;
      while(fast!=NULL&&fast->next!=NULL)
      {
          fast=fast->next->next;
          slow=slow->next;
      }
      return slow;
  }
    ListNode* sortList(ListNode* head) {
        if(head==NULL||head->next==NULL)
        return head;
        ListNode* mid=find(head);
        ListNode* second=mid->next;
        mid->next=NULL;
        ListNode* left=sortList(head);
        ListNode* right=sortList(second);

        ListNode*ans=mergeTwoLists(left,right);
        return ans;
        
    }
};
