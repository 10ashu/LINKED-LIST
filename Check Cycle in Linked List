/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        // ListNode* slow=head;
        // ListNode* fast=head;
        // if(head==NULL)
        // return false;
        // while(fast!=NULL&&fast->next!=NULL)
        // {
        //     fast=fast->next->next;
        //     slow=slow->next;
        //     if(slow==fast)
        //     {
        //         return true;
        //     }
        // }
        // return false;
        unordered_map<ListNode*,bool> map;
        while(head!=NULL)
        {
            if(map.find(head)!=map.end())
            return true;
            else
            map[head]=true;
            head=head->next;
        }
        return false;
    }
    	
};
